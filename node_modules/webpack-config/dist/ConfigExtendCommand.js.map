{"version":3,"sources":["../src/ConfigExtendCommand.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;AAcA,IAAM,SAAS,uBAAf;;;;;;AAMA,IAAM,UAAU,uBAAhB;;;;;;;IAMM,mB;;;;;;;;;;AAOF,iCAAY,eAAZ,EAA6B,MAA7B,EAAqC,OAArC,EAA8C;AAAA;;AAAA,iIACpC,eADoC;;AAG1C,eAAO,GAAP,QAAiB,MAAjB;AACA,gBAAQ,GAAR,QAAkB,OAAlB;AAJ0C;AAK7C;;;;;;;;;;;;;;;gCAqBO,M,EAAQ,O,EAAS;AAAA;;AACrB,gBAAM,oBAAoB,oBAAoB,gBAApB,CAAqC,OAArC,CAA1B;;AAEA,8BAAkB,OAAlB,CAA0B,iBAAS;AAAA,4CACE,OAAK,eAAL,CAAqB,OAArB,CAA6B,MAA7B,EAAqC,KAArC,CADF;;AAAA,oBACvB,QADuB,yBACvB,QADuB;AAAA,oBACb,UADa,yBACb,UADa;;AAE/B,oBAAM,gBAAgB,OAAK,MAAL,CAAY,UAAZ,CAAuB,QAAvB,CAAtB;;AAEA,oBAAI,yCAAJ,EAAqC;AAAA;AACjC,+BAAO,cAAP,CAAsB,QAAtB,CAA+B,IAA/B,CAAoC,cAAc,cAAlD;;AAEA,4BAAI,aAAa,cAAc,KAAd,EAAjB;;AAEA,mCAAW,OAAX,CAAmB,qBAAa;AAC5B,gCAAM,aAAa,UAAU,IAAV,CAAe,MAAf,EAAuB,UAAvB,CAAnB;;AAEA,gCAAI,CAAC,sBAAS,UAAT,CAAL,EAA2B;AACvB,6CAAa,EAAb;AACH,6BAFD,MAEO;AACH,6CAAa,UAAb;AACH;;AAED,gCAAI,EAAE,sCAAF,CAAJ,EAAqC;AACjC,6CAAa,OAAK,OAAL,CAAa,YAAb,CAA0B,EAA1B,EAA8B,KAA9B,CAAoC,UAApC,CAAb;AACH;AACJ,yBAZD;;AAcA,4BAAI,sCAAJ,EAAkC;AAC9B,mCAAO,KAAP,CAAa,WAAW,QAAX,EAAb;AACH;AArBgC;AAsBpC;AACJ,aA3BD;AA4BH;;;;;;;;;4BA9CY;AACT,mBAAO,OAAO,GAAP,CAAW,IAAX,CAAP;AACH;;;;;;;;;4BAMa;AACV,mBAAO,QAAQ,GAAR,CAAY,IAAZ,CAAP;AACH;;;yCA0CuB,O,EAAS;AAC7B,gBAAI,oBAAoB,EAAxB;;AAEA,gBAAI,sBAAS,OAAT,CAAJ,EAAuB;AACnB,oCAAoB,CAAC;AACjB,8BAAU,OADO;AAEjB,gCAAY;AAFK,iBAAD,CAApB;AAOH,aARD,MAQO,IAAI,sBAAS,OAAT,CAAJ,EAAuB;AAAA;AAAA;AAAA;;AAAA;AAC1B,oEAAoC,uBAAe,OAAf,CAApC,4GAA6D;AAAA;;AAAA,4BAAjD,QAAiD;AAAA,4BAAvC,SAAuC;;AACzD,4BAAM,aAAa,MAAM,OAAN,CAAc,SAAd,IAA2B,SAA3B,GAAuC,CAAC,SAAD,CAA1D;;AAEA,0CAAkB,IAAlB,CAAuB;AACnB,8CADmB;AAEnB,mFACO,UADP;AAFmB,yBAAvB;AAOH;AAXyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY7B;;AAED,mBAAO,iBAAP;AACH;;;;;kBAGU,mB","file":"ConfigExtendCommand.js","sourcesContent":["import {\n    isObject,\n    isString\n} from 'lodash';\nimport Config from './Config';\nimport ConfigCommand from './ConfigCommand';\nimport DEFAULT_TRANSFORM from './ConfigDefaultTransform';\nimport CLEANUP_TRANSFORM from './ConfigCleanupTransform';\n\n/**\n * @typedef {Object<String,ConfigTransform[]>} ConfigExtendOptions\n */\n\n/**\n * @typedef {String|Object<String,ConfigTransform>|ConfigExtendOptions} ConfigExtendPossibleOptions\n */\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst LOADER = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst FACTORY = new WeakMap();\n\n/**\n * @class\n * @extends {ConfigCommand}\n */\nclass ConfigExtendCommand extends ConfigCommand {\n    /**\n     * @constructor\n     * @param {ConfigOptionsResolver} optionsResolver\n     * @param {ConfigLoader} loader\n     * @param {ConfigFactory} factory\n     */\n    constructor(optionsResolver, loader, factory) {\n        super(optionsResolver);\n\n        LOADER.set(this, loader);\n        FACTORY.set(this, factory);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigLoader}\n     */\n    get loader() {\n        return LOADER.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigFactory}\n     */\n    get factory() {\n        return FACTORY.get(this);\n    }\n\n    /**\n     * @override\n     */\n    execute(config, options) {\n        const normalizedOptions = ConfigExtendCommand.normalizeOptions(options);\n\n        normalizedOptions.forEach(value => {\n            const { filename, transforms } = this.optionsResolver.resolve(config, value);\n            const pendingConfig = this.loader.loadConfig(filename);\n\n            if (pendingConfig instanceof Config) {\n                config.dependencyTree.children.push(pendingConfig.dependencyTree);\n\n                let prevConfig = pendingConfig.clone();\n\n                transforms.forEach(transform => {\n                    const currConfig = transform.call(config, prevConfig);\n\n                    if (!isObject(currConfig)) {\n                        prevConfig = {};\n                    } else {\n                        prevConfig = currConfig;\n                    }\n\n                    if (!(prevConfig instanceof Config)) {\n                        prevConfig = this.factory.createConfig({}).merge(prevConfig);\n                    }\n                });\n\n                if (prevConfig instanceof Config) {\n                    config.merge(prevConfig.toObject());\n                }\n            }\n        });\n    }\n\n    /**\n     * @param {ConfigExtendPossibleOptions} options\n     * @returns {ConfigExtendOptions[]}\n     */\n    static normalizeOptions(options) {\n        let normalizedOptions = [];\n\n        if (isString(options)) {\n            normalizedOptions = [{\n                filename: options,\n                transforms: [\n                    DEFAULT_TRANSFORM,\n                    CLEANUP_TRANSFORM\n                ]\n            }];\n        } else if (isObject(options)) {\n            for (const [filename, transform] of Object.entries(options)) {\n                const transforms = Array.isArray(transform) ? transform : [transform];\n\n                normalizedOptions.push({\n                    filename,\n                    transforms: [\n                        ...transforms,\n                        CLEANUP_TRANSFORM\n                    ]\n                });\n            }\n        }\n\n        return normalizedOptions;\n    }\n}\n\nexport default ConfigExtendCommand;\n"]}