{"version":3,"sources":["../src/ConfigContainer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAMA,IAAM,YAAY,uBAAlB;;;;;;IAKM,e;;;;;AAIF,+BAAc;AAAA;;AACV,kBAAU,GAAV,CAAc,IAAd,EAAoB,2BAApB;;AAEA,aAAK,KAAL;AACH;;;;;;;;;;;;;;;;gCAcO;AACJ,gBAAM,YAAY,KAAK,SAAvB;;AAEA,sBAAU,SAAV,CAAoB,eAApB,EAAqC,IAArC;AACA,sBAAU,SAAV,8BAAuC,gCAAsB,uBAAe,QAAQ,GAAvB,CAAtB,CAAvC;AACA,sBAAU,SAAV,+CAA8C,6BAA9C;AAGA,sBAAU,SAAV,+BAAwC,kCAAxC;AACA,sBAAU,SAAV,iEAAgE,2DAAhE;AAIA,sBAAU,SAAV,6DAA4D,gCAA5D;AAGA,sBAAU,SAAV,iDAAgD,8EAAhD;AAKA,sBAAU,SAAV,iDAAgD,8BAAhD;AAGA,sBAAU,SAAV,mDAAkD,CAC9C,eAD8C,CAAlD;AAGA,sBAAU,SAAV,qCAAoC,sBAAU,IAAV,CAAe,uHAAf,CAApC;AAMA,sBAAU,SAAV,mDAAkD,sBAAU,IAAV,CAAe,yBAAf,CAAlD;AAGA,sBAAU,SAAV,mEAAkE,gCAAlE;AAGA,sBAAU,SAAV,mEAAkE,iCAAlE;AAGA,sBAAU,SAAV,6DAA4D,iCAA5D;AAGA,sBAAU,SAAV,+DAA8D,sBAAU,IAAV,CAAe,kFAAf,CAA9D;AAKH;;;;;;;;;gCAMO,C,EAAG;AACP,mBAAO,KAAK,SAAL,CAAe,UAAf,CAA0B,CAA1B,CAAP;AACH;;;;;;;;;8BAMK,C,EAAG;AAAA;;AACL,mBAAO;AAAA,uBAAM,MAAK,OAAL,CAAa,CAAb,CAAN;AAAA,aAAP;AACH;;;4BA1Ee;AACZ,mBAAO,UAAU,GAAV,CAAc,IAAd,CAAP;AACH;;;;;kBA2EU,e","file":"ConfigContainer.js","sourcesContent":["import {\n    Container,\n    Transient\n} from 'constitute';\nimport Config from './Config';\nimport ConfigCache from './ConfigCache';\nimport ConfigEnvironment from './ConfigEnvironment';\nimport ConfigPatternCache from './ConfigPatternCache';\nimport ConfigStringResolver from './ConfigStringResolver';\nimport ConfigPathResolver from './ConfigPathResolver';\nimport ConfigLoader from './ConfigLoader';\nimport ConfigFinder from './ConfigFinder';\nimport ConfigFactory from './ConfigFactory';\nimport ConfigBuilder from './ConfigBuilder';\nimport ConfigOptionsResolver from './ConfigOptionsResolver';\nimport ConfigDefaultsCommand from './ConfigDefaultsCommand';\nimport ConfigMergeCommand from './ConfigMergeCommand';\nimport ConfigExtendCommand from './ConfigExtendCommand';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CONTAINER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigContainer {\n    /**\n     * @constructor\n     */\n    constructor() {\n        CONTAINER.set(this, new Container());\n\n        this.setUp();\n    }\n\n    /**\n     * @protected\n     * @type {Container}\n     */\n    get container() {\n        return CONTAINER.get(this);\n    }\n\n    /**\n     * @protected\n     * @returns {void}\n     */\n    setUp() {\n        const container = this.container;\n\n        container.bindValue(ConfigContainer, this);\n        container.bindValue(ConfigEnvironment, new ConfigEnvironment(Object.entries(process.env)));\n        container.bindClass(ConfigCache, ConfigCache, [\n            ConfigEnvironment\n        ]);\n        container.bindValue(ConfigPatternCache, new ConfigPatternCache());\n        container.bindClass(ConfigStringResolver, ConfigStringResolver, [\n            ConfigEnvironment,\n            ConfigPatternCache\n        ]);\n        container.bindClass(ConfigPathResolver, ConfigPathResolver, [\n            ConfigStringResolver\n        ]);\n        container.bindClass(ConfigLoader, ConfigLoader, [\n            ConfigPathResolver,\n            ConfigCache,\n            ConfigFactory\n        ]);\n        container.bindClass(ConfigFinder, ConfigFinder, [\n            ConfigPathResolver\n        ]);\n        container.bindClass(ConfigFactory, ConfigFactory, [\n            ConfigContainer\n        ]);\n        container.bindClass(Config, Config, Transient.with([\n            ConfigFactory,\n            ConfigDefaultsCommand,\n            ConfigMergeCommand,\n            ConfigExtendCommand\n        ]));\n        container.bindClass(ConfigBuilder, ConfigBuilder, Transient.with([\n            ConfigFactory\n        ]));\n        container.bindClass(ConfigOptionsResolver, ConfigOptionsResolver, [\n            ConfigStringResolver\n        ]);\n        container.bindClass(ConfigDefaultsCommand, ConfigDefaultsCommand, [\n            ConfigOptionsResolver\n        ]);\n        container.bindClass(ConfigMergeCommand, ConfigMergeCommand, [\n            ConfigOptionsResolver\n        ]);\n        container.bindClass(ConfigExtendCommand, ConfigExtendCommand, Transient.with([\n            ConfigOptionsResolver,\n            ConfigLoader,\n            ConfigFactory\n        ]));\n    }\n\n    /**\n     * @param {*} T\n     * @returns {*}\n     */\n    resolve(T) {\n        return this.container.constitute(T);\n    }\n\n    /**\n     * @param {*} T\n     * @returns {Function}\n     */\n    proxy(T) {\n        return () => this.resolve(T);\n    }\n}\n\nexport default ConfigContainer;\n"]}