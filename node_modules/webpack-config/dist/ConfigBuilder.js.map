{"version":3,"sources":["../src/ConfigBuilder.js"],"names":[],"mappings":"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","file":"ConfigBuilder.js","sourcesContent":["import {\n    isFunction\n} from 'lodash';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CONFIG = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PENDING_CONFIG = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst FACTORY = new WeakMap();\n\n/**\n * @private\n * @param {String} path\n * @param {*|Function} hook\n * @param {Config} current\n * @param {Config} previous\n * @returns {*}\n */\nconst evalHook = (path, hook, current, previous) => isFunction(hook) ? hook(path, current, previous) : hook;\n\n/**\n * @class\n */\nclass ConfigBuilder {\n    /**\n     * @constructor\n     * @param {ConfigFactory} factory\n     */\n    constructor(factory) {\n        FACTORY.set(this, factory);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigFactory}\n     */\n    get factory() {\n        return FACTORY.get(this);\n    }\n\n    /**\n     * @private\n     * @readonly\n     * @type {Config|ConfigList}\n     */\n    get config() {\n        return this.getOrSetConfig(CONFIG);\n    }\n\n    /**\n     * @readonly\n     * @type {Config}\n     */\n    get pendingConfig() {\n        return this.getOrSetConfig(PENDING_CONFIG);\n    }\n\n    /**\n     * @private\n     * @param {WeakMap} map\n     * @returns {Config}\n     */\n    getOrSetConfig(map) {\n        if (!map.has(this)) {\n            map.set(this, this.factory.createConfig({}));\n        }\n\n        return map.get(this);\n    }\n\n    /**\n     * @param {Function|Object|Object[]} value\n     * @returns {ConfigBuilder}\n     */\n    copyOf(value) {\n        CONFIG.set(this, this.factory.createConfig(value));\n\n        return this;\n    }\n\n    /**\n     * @see {@link Config#merge}\n     * @param {...ConfigMergeOptions} values\n     * @returns {ConfigBuilder}\n     */\n    merge(...values) {\n        this.pendingConfig.merge(...values);\n\n        return this;\n    }\n\n    /**\n     * @see {@link Config#defaults}\n     * @param {...ConfigDefaultsOptions} values\n     * @returns {ConfigBuilder}\n     */\n    defaults(...values) {\n        this.pendingConfig.defaults(...values);\n\n        return this;\n    }\n\n    /**\n     * @see {@link Config#extend}\n     * @param {...ConfigExtendOptions} values\n     * @returns {ConfigBuilder}\n     */\n    extend(...values) {\n        this.pendingConfig.extend(...values);\n\n        return this;\n    }\n\n    /**\n     * @param {Object<String,Function>} [hooks]\n     * @returns {ConfigBuilder}\n     */\n    applyHooks(hooks = {}) {\n        for (const [path, hook] of Object.entries(hooks)) {\n            if (Array.isArray(this.config)) {\n                this.config.forEach(config => {\n                    if (config.has(path)) {\n                        const value = evalHook(path, hook, this.pendingConfig, config);\n\n                        this.pendingConfig.set(path, value);\n                    }\n                });\n            } else {\n                if (this.pendingConfig.has(path)) {\n                    const value = evalHook(path, hook, this.pendingConfig, this.config);\n\n                    this.pendingConfig.set(path, value);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @returns {Config|ConfigList}\n     */\n    build() {\n        let value;\n\n        if (Array.isArray(this.config)) {\n            value = this.config.map(x => x.clone().merge(this.pendingConfig).toObject());\n        } else {\n            value = this.config.clone().merge(this.pendingConfig).toObject();\n        }\n\n        const config = this.factory.createConfig(value);\n\n        PENDING_CONFIG.delete(this);\n        CONFIG.set(this, config);\n\n        return config;\n    }\n}\n\nexport default ConfigBuilder;\n"]}