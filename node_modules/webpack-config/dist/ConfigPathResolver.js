'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _lodash = require('lodash');

var _ConfigPathDefaultResolvers = require('./ConfigPathDefaultResolvers');

var _ConfigPathDefaultResolvers2 = _interopRequireDefault(_ConfigPathDefaultResolvers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * @type {WeakMap}
 */
var PATH_RESOLVERS = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var STRING_RESOLVER = new _weakMap2.default();

/**
 * @class
 */

var ConfigPathResolver = function () {
    /**
     * @constructor
     * @param {ConfigStringResolver} stringResolver
     * @param {Function[]} [pathResolvers]
     */

    function ConfigPathResolver(stringResolver) {
        var pathResolvers = arguments.length <= 1 || arguments[1] === undefined ? _ConfigPathDefaultResolvers2.default : arguments[1];
        (0, _classCallCheck3.default)(this, ConfigPathResolver);

        STRING_RESOLVER.set(this, stringResolver);
        PATH_RESOLVERS.set(this, pathResolvers);
    }

    /**
     * @readonly
     * @type {ConfigStringResolver}
     */


    (0, _createClass3.default)(ConfigPathResolver, [{
        key: 'resolve',


        /**
         * @param {String} value
         * @returns {String}
         */
        value: function resolve(value) {
            value = this.stringResolver.resolve(value);

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(this.pathResolvers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var resolver = _step.value;

                    var resolvedValue = resolver(value),
                        throwsError = (0, _lodash.isError)(value) || value instanceof Error;

                    if ((0, _lodash.isString)(resolvedValue) && !throwsError) {
                        value = resolvedValue;
                        break;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return value;
        }
    }, {
        key: 'stringResolver',
        get: function get() {
            return STRING_RESOLVER.get(this);
        }

        /**
         * @readonly
         * @type {Function[]}
         */

    }, {
        key: 'pathResolvers',
        get: function get() {
            return PATH_RESOLVERS.get(this);
        }
    }]);
    return ConfigPathResolver;
}();

exports.default = ConfigPathResolver;
module.exports = exports['default'];
//# sourceMappingURL=ConfigPathResolver.js.map