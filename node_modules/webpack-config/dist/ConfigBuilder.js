'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * @type {WeakMap}
 */
var CONFIG = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var PENDING_CONFIG = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var FACTORY = new _weakMap2.default();

/**
 * @private
 * @param {String} path
 * @param {*|Function} hook
 * @param {Config} current
 * @param {Config} previous
 * @returns {*}
 */
var evalHook = function evalHook(path, hook, current, previous) {
    return (0, _lodash.isFunction)(hook) ? hook(path, current, previous) : hook;
};

/**
 * @class
 */

var ConfigBuilder = function () {
    /**
     * @constructor
     * @param {ConfigFactory} factory
     */

    function ConfigBuilder(factory) {
        (0, _classCallCheck3.default)(this, ConfigBuilder);

        FACTORY.set(this, factory);
    }

    /**
     * @readonly
     * @type {ConfigFactory}
     */


    (0, _createClass3.default)(ConfigBuilder, [{
        key: 'getOrSetConfig',


        /**
         * @private
         * @param {WeakMap} map
         * @returns {Config}
         */
        value: function getOrSetConfig(map) {
            if (!map.has(this)) {
                map.set(this, this.factory.createConfig({}));
            }

            return map.get(this);
        }

        /**
         * @param {Function|Object|Object[]} value
         * @returns {ConfigBuilder}
         */

    }, {
        key: 'copyOf',
        value: function copyOf(value) {
            CONFIG.set(this, this.factory.createConfig(value));

            return this;
        }

        /**
         * @see {@link Config#merge}
         * @param {...ConfigMergeOptions} values
         * @returns {ConfigBuilder}
         */

    }, {
        key: 'merge',
        value: function merge() {
            var _pendingConfig;

            (_pendingConfig = this.pendingConfig).merge.apply(_pendingConfig, arguments);

            return this;
        }

        /**
         * @see {@link Config#defaults}
         * @param {...ConfigDefaultsOptions} values
         * @returns {ConfigBuilder}
         */

    }, {
        key: 'defaults',
        value: function defaults() {
            var _pendingConfig2;

            (_pendingConfig2 = this.pendingConfig).defaults.apply(_pendingConfig2, arguments);

            return this;
        }

        /**
         * @see {@link Config#extend}
         * @param {...ConfigExtendOptions} values
         * @returns {ConfigBuilder}
         */

    }, {
        key: 'extend',
        value: function extend() {
            var _pendingConfig3;

            (_pendingConfig3 = this.pendingConfig).extend.apply(_pendingConfig3, arguments);

            return this;
        }

        /**
         * @param {Object<String,Function>} [hooks]
         * @returns {ConfigBuilder}
         */

    }, {
        key: 'applyHooks',
        value: function applyHooks() {
            var _this = this;

            var hooks = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                var _loop = function _loop() {
                    var _step$value = (0, _slicedToArray3.default)(_step.value, 2);

                    var path = _step$value[0];
                    var hook = _step$value[1];

                    if (Array.isArray(_this.config)) {
                        _this.config.forEach(function (config) {
                            if (config.has(path)) {
                                var value = evalHook(path, hook, _this.pendingConfig, config);

                                _this.pendingConfig.set(path, value);
                            }
                        });
                    } else {
                        if (_this.pendingConfig.has(path)) {
                            var value = evalHook(path, hook, _this.pendingConfig, _this.config);

                            _this.pendingConfig.set(path, value);
                        }
                    }
                };

                for (var _iterator = (0, _getIterator3.default)((0, _entries2.default)(hooks)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return this;
        }

        /**
         * @returns {Config|ConfigList}
         */

    }, {
        key: 'build',
        value: function build() {
            var _this2 = this;

            var value = void 0;

            if (Array.isArray(this.config)) {
                value = this.config.map(function (x) {
                    return x.clone().merge(_this2.pendingConfig).toObject();
                });
            } else {
                value = this.config.clone().merge(this.pendingConfig).toObject();
            }

            var config = this.factory.createConfig(value);

            PENDING_CONFIG.delete(this);
            CONFIG.set(this, config);

            return config;
        }
    }, {
        key: 'factory',
        get: function get() {
            return FACTORY.get(this);
        }

        /**
         * @private
         * @readonly
         * @type {Config|ConfigList}
         */

    }, {
        key: 'config',
        get: function get() {
            return this.getOrSetConfig(CONFIG);
        }

        /**
         * @readonly
         * @type {Config}
         */

    }, {
        key: 'pendingConfig',
        get: function get() {
            return this.getOrSetConfig(PENDING_CONFIG);
        }
    }]);
    return ConfigBuilder;
}();

exports.default = ConfigBuilder;
module.exports = exports['default'];
//# sourceMappingURL=ConfigBuilder.js.map