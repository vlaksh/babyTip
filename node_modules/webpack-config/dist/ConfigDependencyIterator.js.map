{"version":3,"sources":["../src/ConfigDependencyIterator.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;IAWM,wB;;;;;;;;;;;AAQF,oCAAY,IAAZ,EAAkE;AAAA,QAAhD,UAAgD,yDAAnC,CAAmC;AAAA,QAAhC,cAAgC,yDAAf,IAAe;AAAA,QAAT,OAAS;AAAA;AAAA,6HACxD,IADwD,EAClD,UADkD,EACtC,cADsC,EACtB,OADsB;AAEjE;;;;;;;;;0CAKqB,I,EAAM,I,EAAM,I,EAAM;AAAA;;AACpC,aAAO,KAAK,QAAL,CAAc,GAAd,CAAkB;AAAA,eAAS,OAAK,QAAL,CAAc,IAAd,EAAoB,KAApB,EAA2B,MAAM,IAAN,CAAW,QAAtC,EAAgD,KAAK,MAAL,CAAY,MAAM,IAAN,CAAW,QAAvB,CAAhD,EAAkF,OAAO,CAAzF,CAAT;AAAA,OAAlB,CAAP;AACH;;;;;kBAGU,wB","file":"ConfigDependencyIterator.js","sourcesContent":["import RecursiveIterator from 'recursive-iterator';\n\n/**\n * @external RecursiveIterator\n * @see https://github.com/nervgh/recursive-iterator\n */\n\n/**\n * @class\n * @extends {external:RecursiveIterator}\n */\nclass ConfigDependencyIterator extends RecursiveIterator {\n    /**\n     * @constructor\n     * @param {ConfigDependency} root\n     * @param {Number} [bypassMode=0]\n     * @param {Boolean} [ignoreCircular=true]\n     * @param {Number} [maxDeep]\n     */\n    constructor(root, bypassMode = 0, ignoreCircular = true, maxDeep) {\n        super(root, bypassMode, ignoreCircular, maxDeep);\n    }\n\n    /**\n     * @override\n     */\n    getStatesOfChildNodes(node, path, deep) {\n        return node.children.map(child => this.getState(node, child, child.root.filename, path.concat(child.root.filename), deep + 1));\n    }\n}\n\nexport default ConfigDependencyIterator;\n"]}