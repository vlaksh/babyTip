'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _path = require('path');

var _lodash = require('lodash');

var _glob = require('glob');

var _glob2base = require('glob2base');

var _glob2base2 = _interopRequireDefault(_glob2base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * @type {WeakMap}
 */
var PATH_RESOLVER = new _weakMap2.default();

/**
 * @private
 * @type {Object}
 */
var GLOB_OPTIONS = {
    cache: true,
    dot: false,
    silent: true
};

/**
 * @class
 */

var ConfigFinder = function () {
    /**
     * @constructor
     * @param {ConfigPathResolver} pathResolver
     */

    function ConfigFinder(pathResolver) {
        (0, _classCallCheck3.default)(this, ConfigFinder);

        PATH_RESOLVER.set(this, pathResolver);
    }

    /**
     * @readonly
     * @type {ConfigPathResolver}
     */


    (0, _createClass3.default)(ConfigFinder, [{
        key: 'findClosestConfigs',


        /**
         * @param {String} pattern
         * @param {String[]} [visited]
         * @returns {String[]}
         */
        value: function findClosestConfigs(pattern) {
            var visited = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

            pattern = this.pathResolver.resolve(pattern);

            if ((0, _lodash.includes)(visited, pattern)) {
                return [];
            }

            visited.push(pattern);

            var configs = this.findConfigs(pattern);

            if (configs.length > 0) {
                return configs;
            }

            var cwd = (0, _glob2base2.default)(new _glob.Glob(pattern)),
                paths = (0, _lodash.trimEnd)(cwd, _path.sep).split(_path.sep);

            pattern = (0, _path.join)((0, _lodash.dropRight)(paths).join(_path.sep), (0, _path.basename)(pattern));

            return this.findClosestConfigs(pattern, visited);
        }

        /**
         * @param {String} pattern
         * @returns {String[]}
         */

    }, {
        key: 'findConfigs',
        value: function findConfigs(pattern) {
            var _this = this;

            pattern = this.pathResolver.resolve(pattern);

            return (0, _glob.sync)(pattern, GLOB_OPTIONS).map(function (filename) {
                return _this.pathResolver.resolve(filename);
            });
        }
    }, {
        key: 'pathResolver',
        get: function get() {
            return PATH_RESOLVER.get(this);
        }
    }]);
    return ConfigFinder;
}();

exports.default = ConfigFinder;
module.exports = exports['default'];
//# sourceMappingURL=ConfigFinder.js.map