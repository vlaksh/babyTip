{"version":3,"sources":["../src/ConfigFinder.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAKA;;AAKA;;AAIA;;;;;;;;;;AAMA,IAAM,gBAAgB,uBAAtB;;;;;;AAMA,IAAM,eAAe;AACjB,WAAO,IADU;AAEjB,SAAK,KAFY;AAGjB,YAAQ;AAHS,CAArB;;;;;;IASM,Y;;;;;;AAKF,0BAAY,YAAZ,EAA0B;AAAA;;AACtB,sBAAc,GAAd,CAAkB,IAAlB,EAAwB,YAAxB;AACH;;;;;;;;;;;;;;;;;2CAekB,O,EAAuB;AAAA,gBAAd,OAAc,yDAAJ,EAAI;;AACtC,sBAAU,KAAK,YAAL,CAAkB,OAAlB,CAA0B,OAA1B,CAAV;;AAEA,gBAAI,sBAAS,OAAT,EAAkB,OAAlB,CAAJ,EAAgC;AAC5B,uBAAO,EAAP;AACH;;AAED,oBAAQ,IAAR,CAAa,OAAb;;AAEA,gBAAM,UAAU,KAAK,WAAL,CAAiB,OAAjB,CAAhB;;AAEA,gBAAI,QAAQ,MAAR,GAAiB,CAArB,EAAwB;AACpB,uBAAO,OAAP;AACH;;AAED,gBAAM,MAAM,yBAAU,eAAS,OAAT,CAAV,CAAZ;gBACI,QAAQ,qBAAQ,GAAR,aAAkB,KAAlB,WADZ;;AAGA,sBAAU,gBAAK,uBAAU,KAAV,EAAiB,IAAjB,WAAL,EAAiC,oBAAS,OAAT,CAAjC,CAAV;;AAEA,mBAAO,KAAK,kBAAL,CAAwB,OAAxB,EAAiC,OAAjC,CAAP;AACH;;;;;;;;;oCAMW,O,EAAS;AAAA;;AACjB,sBAAU,KAAK,YAAL,CAAkB,OAAlB,CAA0B,OAA1B,CAAV;;AAEA,mBAAO,gBAAK,OAAL,EAAc,YAAd,EAA4B,GAA5B,CAAgC;AAAA,uBAAY,MAAK,YAAL,CAAkB,OAAlB,CAA0B,QAA1B,CAAZ;AAAA,aAAhC,CAAP;AACH;;;4BAxCkB;AACf,mBAAO,cAAc,GAAd,CAAkB,IAAlB,CAAP;AACH;;;;;kBAyCU,Y","file":"ConfigFinder.js","sourcesContent":["import {\n    sep,\n    join,\n    basename\n} from 'path';\nimport {\n    trimEnd,\n    dropRight,\n    includes\n} from 'lodash';\nimport {\n    sync,\n    Glob\n} from 'glob';\nimport glob2base from 'glob2base';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATH_RESOLVER = new WeakMap();\n\n/**\n * @private\n * @type {Object}\n */\nconst GLOB_OPTIONS = {\n    cache: true,\n    dot: false,\n    silent: true\n};\n\n/**\n * @class\n */\nclass ConfigFinder {\n    /**\n     * @constructor\n     * @param {ConfigPathResolver} pathResolver\n     */\n    constructor(pathResolver) {\n        PATH_RESOLVER.set(this, pathResolver);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigPathResolver}\n     */\n    get pathResolver() {\n        return PATH_RESOLVER.get(this);\n    }\n\n    /**\n     * @param {String} pattern\n     * @param {String[]} [visited]\n     * @returns {String[]}\n     */\n    findClosestConfigs(pattern, visited = []) {\n        pattern = this.pathResolver.resolve(pattern);\n\n        if (includes(visited, pattern)) {\n            return [];\n        }\n\n        visited.push(pattern);\n\n        const configs = this.findConfigs(pattern);\n\n        if (configs.length > 0) {\n            return configs;\n        }\n\n        const cwd = glob2base(new Glob(pattern)),\n            paths = trimEnd(cwd, sep).split(sep);\n\n        pattern = join(dropRight(paths).join(sep), basename(pattern));\n\n        return this.findClosestConfigs(pattern, visited);\n    }\n\n    /**\n     * @param {String} pattern\n     * @returns {String[]}\n     */\n    findConfigs(pattern) {\n        pattern = this.pathResolver.resolve(pattern);\n\n        return sync(pattern, GLOB_OPTIONS).map(filename => this.pathResolver.resolve(filename));\n    }\n}\n\nexport default ConfigFinder;\n"]}