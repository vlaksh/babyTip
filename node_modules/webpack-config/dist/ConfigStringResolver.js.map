{"version":3,"sources":["../src/ConfigStringResolver.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAM,cAAc,uBAApB;;;;;;AAMA,IAAM,gBAAgB,uBAAtB;;;;;;IAKM,oB;;;;;;;AAMF,kCAAY,WAAZ,EAAyB,YAAzB,EAAuC;AAAA;;AACnC,oBAAY,GAAZ,CAAgB,IAAhB,EAAsB,WAAtB;AACA,sBAAc,GAAd,CAAkB,IAAlB,EAAwB,YAAxB;AACH;;;;;;;;;;;;;;;;gCAsBO,K,EAAO;AACX,gBAAM,UAAU,EAAhB;;AADW;AAAA;AAAA;;AAAA;AAGX,gEAAkB,KAAK,WAAL,CAAiB,IAAjB,EAAlB,4GAA2C;AAAA,wBAAhC,GAAgC;;AACvC,4BAAQ,GAAR,IAAe,KAAK,WAAL,CAAiB,OAAjB,CAAyB,GAAzB,CAAf;AACH;AALU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOX,gBAAI,sBAAJ;;AAEA,gBAAI;AACA,gCAAgB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAvB,EAA8B,OAA9B,CAAhB;AACH,aAFD,CAEE,OAAO,CAAP,EAAU;AACR,gCAAgB,KAAhB;AACH;;AAED,mBAAO,aAAP;AACH;;;4BAhCiB;AACd,mBAAO,YAAY,GAAZ,CAAgB,IAAhB,CAAP;AACH;;;;;;;;;4BAMkB;AACf,mBAAO,cAAc,GAAd,CAAkB,IAAlB,CAAP;AACH;;;;;kBAyBU,oB","file":"ConfigStringResolver.js","sourcesContent":["/**\n* @private\n* @type {WeakMap}\n*/\nconst ENVIRONMENT = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATTERN_CACHE = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigStringResolver {\n    /**\n     * @constructor\n     * @param {ConfigEnvironment} environment\n     * @param {ConfigPatternCache} patternCache\n     */\n    constructor(environment, patternCache) {\n        ENVIRONMENT.set(this, environment);\n        PATTERN_CACHE.set(this, patternCache);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigEnvironment}\n     */\n    get environment() {\n        return ENVIRONMENT.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigPatternCache}\n     */\n    get patternCache() {\n        return PATTERN_CACHE.get(this);\n    }\n\n    /**\n     * @param {String} value\n     * @returns {String}\n     */\n    resolve(value) {\n        const options = {};\n\n        for (const key of this.environment.keys()) {\n            options[key] = this.environment.valueOf(key);\n        }\n\n        let resolvedValue;\n\n        try {\n            resolvedValue = this.patternCache.eval(value, options);\n        } catch (e) {\n            resolvedValue = value;\n        }\n\n        return resolvedValue;\n    }\n}\n\nexport default ConfigStringResolver;\n"]}