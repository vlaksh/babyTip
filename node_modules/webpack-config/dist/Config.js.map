{"version":3,"sources":["../src/Config.js"],"names":[],"mappings":"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","file":"Config.js","sourcesContent":["import {\n    set,\n    unset,\n    get,\n    has\n} from 'lodash';\nimport ConfigDependency from './ConfigDependency';\n\n/**\n * @private\n * @type {String}\n */\nconst DEPENDENCY_TREE = 'DEPENDENCY_TREE';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst FACTORY = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst DEFAULTS_COMMAND = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst MERGE_COMMAND = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst EXTEND_COMMAND = new WeakMap();\n\n/**\n * @private\n * @param {Config} config\n * @param {ConfigCommand} command\n * @param {...*} values\n * @returns {Config}\n */\nconst executeCommand = (config, command, ...values) => {\n    for (const value of values) {\n        command.execute(config, value);\n    }\n\n    return config;\n};\n\n/**\n * @class\n */\nclass Config {\n    /**\n     * @constructor\n     * @param {ConfigFactory} factory\n     * @param {ConfigDefaultsCommand} defaultsCommand\n     * @param {ConfigMergeCommand} mergeCommand\n     * @param {ConfigExtendCommand} extendCommand\n     */\n    constructor(factory, defaultsCommand, mergeCommand, extendCommand) {\n        FACTORY.set(this, factory);\n        DEFAULTS_COMMAND.set(this, defaultsCommand);\n        MERGE_COMMAND.set(this, mergeCommand);\n        EXTEND_COMMAND.set(this, extendCommand);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigFactory}\n     */\n    get factory() {\n        return FACTORY.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigDefaultsCommand}\n     */\n    get defaultsCommand() {\n        return DEFAULTS_COMMAND.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigMergeCommand}\n     */\n    get mergeCommand() {\n        return MERGE_COMMAND.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigExtendCommand}\n     */\n    get extendCommand() {\n        return EXTEND_COMMAND.get(this);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * let config = new Config();\n     *\n     * config.extend('./test/fixtures/webpack.1.config.js');\n     *\n     * for (let {node} of config.dependencyTree) {\n     *   console.log(node.root.filename);\n     * }\n     * // ./test/fixtures/webpack.1.config.js\n     * // ./test/fixtures/webpack.2.config.js\n     * // ./test/fixtures/webpack.3.config.js\n     * // ./test/fixtures/webpack.5.config.js\n     * // ./test/fixtures/webpack.4.config.js\n     * @description Keeps information about configs which have been loaded via {@link Config#extend}\n     * @readonly\n     * @type {ConfigDependency}\n     */\n    get dependencyTree() {\n        if (!this[DEPENDENCY_TREE]) {\n            this[DEPENDENCY_TREE] = new ConfigDependency(this);\n        }\n\n        return this[DEPENDENCY_TREE];\n    }\n\n    /**\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().defaults({\n     *    debug: true\n     * }, {\n     *    profile: false\n     * });\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().defaults(() => {\n     *     return {\n     *         debug: true\n     *     };\n     * });\n     * @description Adds `values` if they are missing\n     * @param {...ConfigOptions} values\n     * @returns {Config}\n     */\n    defaults(...values) {\n        return executeCommand(this, this.defaultsCommand, ...values);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().merge({\n     *    debug: true\n     * }, {\n     *    profile: false\n     * });\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().merge(() => {\n     *     return {\n     *         debug: true\n     *     };\n     * });\n     * @description Merges `values`\n     * @param {...ConfigOptions} values\n     * @returns {Config}\n     */\n    merge(...values) {\n        return executeCommand(this, this.mergeCommand, ...values);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().extend('./test/fixtures/webpack.1.config.js');\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * // Loads from `node_modules/react-redux/webpack.config.js`\n     * export default new Config().extend('react-redux/webpack.config.js');\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * // Loads from `node_modules/webpack-config-my/webpack.config.js`\n     * export default new Config().extend('my/webpack.config.js');\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().extend({\n     *    './test/fixtures/webpack.1.config.js': config => {\n     *        delete config.tags;\n     *\n     *        return config;\n     *    }\n     * });\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().extend({\n     *    './test/fixtures/webpack.1.config.js': [config => {\n     *        delete config.tags;\n     *\n     *        return config;\n     *    }, config => {\n     *        delete config.profile;\n     *\n     *        return config;\n     *    }]\n     * });\n     * @description Helps to extend config using local file or shareable config file which should be hosted under `node_modules`\n     * @param {...ConfigExtendPossibleOptions} values\n     * @returns {Config}\n     */\n    extend(...values) {\n        return executeCommand(this, this.extendCommand, ...values);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * let config = new Config();\n     *\n     * config.merge({\n     *   debug: true\n     * });\n     *\n     * console.log(config.clone());\n     * // Config { debug: true }\n     * @description Creates copy of {@link Config}\n     * @returns {Config}\n     */\n    clone() {\n        return new Config(this.factory, this.defaultsCommand, this.mergeCommand, this.extendCommand).merge(this.toObject());\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * let config = new Config();\n     *\n     * config.merge({\n     *   debug: true\n     * });\n     *\n     * console.log(config.toObject());\n     * // Object { debug: true }\n     * @description Returns plain `Object` representation of {@link Config}\n     * @returns {Object}\n     */\n    toObject() {\n        const properties = {};\n\n        for (const [key, value] of Object.entries(this)) {\n            if (this.has(key)) {\n                properties[key] = value;\n            }\n        }\n\n        delete properties[DEPENDENCY_TREE];\n\n        return properties;\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * let config = new Config();\n     *\n     * config.set('debug', true);\n     *\n     * console.log(config.toObject());\n     * // Object { debug: true }\n     * @description Sets `value` at `path`\n     * @param {String} path\n     * @param {*} value\n     * @return {Config}\n     */\n    set(path, value) {\n        set(this, path, value);\n\n        return this;\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * let config = new Config();\n     *\n     * config.set('debug', true);\n     *\n     * console.log(config.get('debug'));\n     * // true\n     * @description Gets `value` at `path`\n     * @param {String} path\n     * @return {*}\n     */\n    get(path) {\n        return get(this, path);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * let config = new Config();\n     *\n     * config.set('debug', true).remove('debug');\n     *\n     * console.log(config.get('debug'));\n     * // undefined\n     * @description Removes `value` at `path`\n     * @param {String} path\n     * @return {Config}\n     */\n    remove(path) {\n        unset(this, path);\n\n        return this;\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * let config = new Config();\n     *\n     * config.set('debug', true);\n     *\n     * console.log(config.has('debug'));\n     * // true\n     * @description Checks if `value` exist at `path`\n     * @param {String} path\n     * @return {Boolean}\n     */\n    has(path) {\n        return has(this, path);\n    }\n\n    /**\n     * @returns {Object}\n     */\n    toJSON() {\n        return this.toObject();\n    }\n\n    /**\n     * Returns `webpack.config.js`\n     * @readonly\n     * @type {String}\n     */\n    static get FILENAME() {\n        return 'webpack.config.js';\n    }\n}\n\nexport default Config;\n"]}