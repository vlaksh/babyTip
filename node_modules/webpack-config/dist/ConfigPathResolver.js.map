{"version":3,"sources":["../src/ConfigPathResolver.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;;;;;;;;;AAMA,IAAM,iBAAiB,uBAAvB;;;;;;AAMA,IAAM,kBAAkB,uBAAxB;;;;;;IAKM,kB;;;;;;;AAMF,gCAAY,cAAZ,EAA+D;AAAA,YAAnC,aAAmC;AAAA;;AAC3D,wBAAgB,GAAhB,CAAoB,IAApB,EAA0B,cAA1B;AACA,uBAAe,GAAf,CAAmB,IAAnB,EAAyB,aAAzB;AACH;;;;;;;;;;;;;;;;gCAsBO,K,EAAO;AACX,oBAAQ,KAAK,cAAL,CAAoB,OAApB,CAA4B,KAA5B,CAAR;;AADW;AAAA;AAAA;;AAAA;AAGX,gEAAuB,KAAK,aAA5B,4GAA2C;AAAA,wBAAhC,QAAgC;;AACvC,wBAAM,gBAAgB,SAAS,KAAT,CAAtB;wBACI,cAAc,qBAAQ,KAAR,KAAkB,iBAAiB,KADrD;;AAGA,wBAAI,sBAAS,aAAT,KAA2B,CAAC,WAAhC,EAA6C;AACzC,gCAAQ,aAAR;AACA;AACH;AACJ;AAXU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaX,mBAAO,KAAP;AACH;;;4BA9BoB;AACjB,mBAAO,gBAAgB,GAAhB,CAAoB,IAApB,CAAP;AACH;;;;;;;;;4BAMmB;AAChB,mBAAO,eAAe,GAAf,CAAmB,IAAnB,CAAP;AACH;;;;;kBAuBU,kB","file":"ConfigPathResolver.js","sourcesContent":["import {\n    isString,\n    isError\n} from 'lodash';\nimport DEFAULT_RESOLVERS from './ConfigPathDefaultResolvers';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATH_RESOLVERS = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst STRING_RESOLVER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigPathResolver {\n    /**\n     * @constructor\n     * @param {ConfigStringResolver} stringResolver\n     * @param {Function[]} [pathResolvers]\n     */\n    constructor(stringResolver, pathResolvers = DEFAULT_RESOLVERS) {\n        STRING_RESOLVER.set(this, stringResolver);\n        PATH_RESOLVERS.set(this, pathResolvers);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigStringResolver}\n     */\n    get stringResolver() {\n        return STRING_RESOLVER.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {Function[]}\n     */\n    get pathResolvers() {\n        return PATH_RESOLVERS.get(this);\n    }\n\n    /**\n     * @param {String} value\n     * @returns {String}\n     */\n    resolve(value) {\n        value = this.stringResolver.resolve(value);\n\n        for (const resolver of this.pathResolvers) {\n            const resolvedValue = resolver(value),\n                throwsError = isError(value) || value instanceof Error;\n\n            if (isString(resolvedValue) && !throwsError) {\n                value = resolvedValue;\n                break;\n            }\n        }\n\n        return value;\n    }\n}\n\nexport default ConfigPathResolver;\n"]}