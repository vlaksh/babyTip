{"version":3,"sources":["../src/ConfigCache.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAQA,IAAM,iBAAiB,sBAAvB;;;;;;AAMA,IAAM,gBAAgB,YAAtB;;;;;;AAMA,IAAM,cAAc,uBAApB;;;;;;;;IAOM,W;;;;;;;;AAKF,yBAAY,WAAZ,EAAyB;AAAA;;AAAA;;AAGrB,oBAAY,GAAZ,QAAsB,WAAtB;AAHqB;AAIxB;;;;;;;;;;;;;;;4BAmCG,G,EAAK;AACL,gBAAI,cAAJ;;AAEA,gBAAI,KAAK,UAAT,EAAqB;AACjB,oBAAI,CAAC,KAAK,GAAL,CAAS,GAAT,CAAL,EAAoB;AAChB,4BAAQ,QAAQ,GAAR,CAAR;;AAEA,yBAAK,GAAL,CAAS,GAAT,EAAc,KAAd;AACH,iBAJD,MAIO;AACH,6HAAkB,GAAlB;AACH;AACJ,aARD,MAQO;AACH,uBAAO,QAAQ,KAAR,CAAc,GAAd,CAAP;;AAEA,wBAAQ,QAAQ,GAAR,CAAR;AACH;;AAED,mBAAO,iBAAI,KAAJ,EAAW,aAAX,EAA0B,KAA1B,IAAmC,MAAM,OAAzC,GAAmD,KAA1D;AACH;;;4BA/CiB;AACd,mBAAO,YAAY,GAAZ,CAAgB,IAAhB,CAAP;AACH;;;;;;;;4BAKgB;AACb,mBAAO,KAAK,WAAL,CAAiB,YAAjB,CAA8B,cAA9B,EAA8C,IAA9C,MAAwD,IAA/D;AACH;;;;;;;;;;;;;;0BAac,K,EAAO;AAClB,iBAAK,WAAL,CAAiB,GAAjB,CAAqB,cAArB,EAAqC,KAArC;AACH;;;;;kBA0BU,W","file":"ConfigCache.js","sourcesContent":["import {\n    get\n} from 'lodash';\n\n/**\n * @private\n * @type {String}\n */\nconst PERSISTENT_KEY = 'WEBPACK_CONFIG_CACHE';\n\n/**\n * @private\n * @type {String}\n */\nconst ES_MODULE_KEY = '__esModule';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst ENVIRONMENT = new WeakMap();\n\n/**\n * Please set `WEBPACK_CONFIG_CACHE` environment variable to `false` to make it non persistent or just use {@link ConfigCache#persistent}\n * @class\n * @extends {Map}\n */\nclass ConfigCache extends Map {\n    /**\n     * @constructor\n     * @param {ConfigEnvironment} environment\n     */\n    constructor(environment) {\n        super();\n\n        ENVIRONMENT.set(this, environment);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigEnvironment}\n     */\n    get environment() {\n        return ENVIRONMENT.get(this);\n    }\n\n    /**\n     * @type {Boolean}\n     */\n    get persistent() {\n        return this.environment.getOrDefault(PERSISTENT_KEY, true) === true;\n    }\n\n    /**\n     * @example\n     * import {\n     *   cache\n     * } from 'webpack-config';\n     *\n     * cache.persistent = false;\n     * @example\n     * WEBPACK_CONFIG_CACHE=false ...\n     * @param {Boolean} value\n     */\n    set persistent(value) {\n        this.environment.set(PERSISTENT_KEY, value);\n    }\n\n    /**\n     * @override\n     */\n    get(key) {\n        let value;\n\n        if (this.persistent) {\n            if (!this.has(key)) {\n                value = require(key);\n\n                this.set(key, value);\n            } else {\n                value = super.get(key);\n            }\n        } else {\n            delete require.cache[key];\n\n            value = require(key);\n        }\n\n        return get(value, ES_MODULE_KEY, false) ? value.default : value;\n    }\n}\n\nexport default ConfigCache;\n"]}