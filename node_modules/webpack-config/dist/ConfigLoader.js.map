{"version":3,"sources":["../src/ConfigLoader.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAQA,IAAM,gBAAgB,uBAAtB;;;;;;AAMA,IAAM,QAAQ,uBAAd;;;;;;AAMA,IAAM,UAAU,uBAAhB;;;;;;IAKM,Y;;;;;;;;AAOF,wBAAY,YAAZ,EAA0B,KAA1B,EAAiC,OAAjC,EAA0C;AAAA;;AACtC,kBAAc,GAAd,CAAkB,IAAlB,EAAwB,YAAxB;AACA,UAAM,GAAN,CAAU,IAAV,EAAgB,KAAhB;AACA,YAAQ,GAAR,CAAY,IAAZ,EAAkB,OAAlB;AACH;;;;;;;;;;;;;;;;+BA8BU,Q,EAAU;AACjB,iBAAW,KAAK,YAAL,CAAkB,OAAlB,CAA0B,QAA1B,CAAX;;AAEA,UAAI,SAAS,KAAK,KAAL,CAAW,GAAX,CAAe,QAAf,CAAb;;AAEA,UAAI,MAAJ,EAAY;AACR,iBAAS,KAAK,OAAL,CAAa,YAAb,CAA0B,MAA1B,CAAT;AACH;;AAED,UAAI,UAAU,CAAC,sBAAS,OAAO,QAAhB,CAAf,EAA0C;AACtC,eAAO,QAAP,GAAkB,QAAlB;AACH;;AAED,aAAO,MAAP;AACH;;;wBAtCkB;AACf,aAAO,cAAc,GAAd,CAAkB,IAAlB,CAAP;AACH;;;;;;;;;wBAMW;AACR,aAAO,MAAM,GAAN,CAAU,IAAV,CAAP;AACH;;;;;;;;;wBAMa;AACV,aAAO,QAAQ,GAAR,CAAY,IAAZ,CAAP;AACH;;;;;kBAuBU,Y","file":"ConfigLoader.js","sourcesContent":["import {\n    isString\n} from 'lodash';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATH_RESOLVER = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CACHE = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst FACTORY = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigLoader {\n    /**\n     * @constructor\n     * @param {ConfigPathResolver} pathResolver\n     * @param {ConfigCache} cache\n     * @param {ConfigFactory} factory\n     */\n    constructor(pathResolver, cache, factory) {\n        PATH_RESOLVER.set(this, pathResolver);\n        CACHE.set(this, cache);\n        FACTORY.set(this, factory);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigPathResolver}\n     */\n    get pathResolver() {\n        return PATH_RESOLVER.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigCache}\n     */\n    get cache() {\n        return CACHE.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigFactory}\n     */\n    get factory() {\n        return FACTORY.get(this);\n    }\n\n    /**\n     * @param {String} filename\n     * @returns {Config|ConfigList}\n     */\n    loadConfig(filename) {\n        filename = this.pathResolver.resolve(filename);\n\n        let config = this.cache.get(filename);\n\n        if (config) {\n            config = this.factory.createConfig(config);\n        }\n\n        if (config && !isString(config.filename)) {\n            config.filename = filename;\n        }\n\n        return config;\n    }\n}\n\nexport default ConfigLoader;\n"]}